{
	"name": "YT_flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "InputBlob",
						"type": "LinkedServiceReference"
					},
					"name": "SourceXml"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "XmlCustomer_out",
						"type": "DatasetReference"
					},
					"name": "DestSQLCust"
				},
				{
					"dataset": {
						"referenceName": "DatasetSqlOrders_out",
						"type": "DatasetReference"
					},
					"name": "DestSqlOrd"
				}
			],
			"transformations": [
				{
					"name": "FlattenXmlCustomers"
				},
				{
					"name": "FlattenXmlOrders"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(output(\n\t\t{AW:Root} as ({AW:Customers} as ({AW:Customer} as ({@CustomerID} as string, {AW:CompanyName} as string, {AW:ContactName} as string, {AW:ContactTitle} as string, {AW:Fax} as string, {AW:FullAddress} as ({AW:Address} as string, {AW:City} as string, {AW:Country} as string, {AW:PostalCode} as integer, {AW:Region} as string), {AW:Phone} as string)[]), {AW:Orders} as ({AW:Order} as ({AW:CustomerID} as string, {AW:EmployeeID} as short, {AW:OrderDate} as string, {AW:RequiredDate} as string, {AW:ShipInfo} as ({@ShippedDate} as string, {AW:Freight} as double, {AW:ShipAddress} as string, {AW:ShipCity} as string, {AW:ShipCountry} as string, {AW:ShipName} as string, {AW:ShipPostalCode} as integer, {AW:ShipRegion} as string, {AW:ShipVia} as short))[]))\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'FileName',\n\tformat: 'xml',\n\tcontainer: 'test',\n\tfileName: 'customer.xml',\n\tvalidationMode: 'none',\n\tnamespaces: true,\n\tnamespacePrefixes: ['http://www.adventure-works.com'->'AW'],\n\tpartitionBy('hash', 1)) ~> SourceXml\nSourceXml foldDown(unroll({AW:Root}.{AW:Customers}.{AW:Customer}),\n\tmapColumn(\n\t\tCustomerID = {AW:Root}.{AW:Customers}.{AW:Customer}.{@CustomerID},\n\t\t{AW:CompanyName} = {AW:Root}.{AW:Customers}.{AW:Customer}.{AW:CompanyName},\n\t\t{AW:ContactName} = {AW:Root}.{AW:Customers}.{AW:Customer}.{AW:ContactName},\n\t\t{AW:ContactTitle} = {AW:Root}.{AW:Customers}.{AW:Customer}.{AW:ContactTitle},\n\t\t{AW:Fax} = {AW:Root}.{AW:Customers}.{AW:Customer}.{AW:Fax},\n\t\t{AW:FullAddress} = {AW:Root}.{AW:Customers}.{AW:Customer}.{AW:FullAddress},\n\t\t{AW:Phone} = {AW:Root}.{AW:Customers}.{AW:Customer}.{AW:Phone},\n\t\t{AW:Orders} = {AW:Root}.{AW:Orders},\n\t\tFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenXmlCustomers\nSourceXml foldDown(unroll({AW:Root}.{AW:Orders}.{AW:Order}),\n\tmapColumn(\n\t\t{AW:CustomerID} = {AW:Root}.{AW:Orders}.{AW:Order}.{AW:CustomerID},\n\t\t{AW:EmployeeID} = {AW:Root}.{AW:Orders}.{AW:Order}.{AW:EmployeeID},\n\t\t{AW:OrderDate} = {AW:Root}.{AW:Orders}.{AW:Order}.{AW:OrderDate},\n\t\t{AW:RequiredDate} = {AW:Root}.{AW:Orders}.{AW:Order}.{AW:RequiredDate},\n\t\tFileName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenXmlOrders\nFlattenXmlCustomers select(mapColumn(\n\t\tCustomerID,\n\t\t{AW:CompanyName},\n\t\t{AW:ContactName},\n\t\t{AW:ContactTitle},\n\t\t{AW:Fax},\n\t\t{AW:Phone},\n\t\tFileName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(input(\n\t\tCustId as string,\n\t\tCity as string,\n\t\tShipPostalCode as integer,\n\t\tFileName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tdateFormat:'yyyy-MM-dd',\n\ttimestampFormat:'yyyy.MM.dd HH:mm:ss',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DestSQLCust\nFlattenXmlOrders sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DestSqlOrd"
		}
	}
}